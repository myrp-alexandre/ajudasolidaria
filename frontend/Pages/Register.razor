@page "/registrar"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions

<h3>Registro</h3>
<br/>
<br/>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label class="control-label">Nome Completo:</label>
                <InputText @bind-Value="userModel.nome" class="form-control" />
            </div>
            <div class="form-group">
                <label class="control-label">Data de Nascimento:</label>
                <InputDate @bind-Value="userModel.dataNascimento" class="form-control"/>        
            </div>
            <div class="form-group">
                <label class="control-label">CPF:</label>
                <InputText @bind-Value="userModel.cpf" @oninput="CpfMask" class="form-control" maxlength="14" />                
            </div>
            <div class="form-group">
                <label class="control-label">Celular:</label>
                <InputText @bind-Value="userModel.telefone" @oninput="TelefoneMask" class="form-control" maxlength="15" />                
            </div>
            @if (states.Length > 0 )
            {
                <div class="form-group">
                    <label class="control-label">Estado:</label>
                    <select id="SearchStateId" class="form-control" @onchange="ChangedValue">
                        <option selected disabled value="-1"> Selecione um Estado</option>
                        @foreach (var state in states)
                        {
                            <option value="@state">@state</option>
                        }
                    </select>
                </div>
            }

            <div class="form-group">
                <label class="control-label">Cidade:</label>
                <InputSelect @bind-Value="userModel.cidade" class="form-control" >
                    <option selected disabled value="-1"> Selecione uma Cidade</option>
                    @if (cities.Length > 0 )
                    {
                        @foreach (var city in cities)
                        {
                            <option value="@city.cidade">@city.cidade</option>
                        }
                    }
                </InputSelect>
            </div>    
            <div class="form-group">
                <label class="control-label">Endereço:</label>
                <InputText @bind-Value="userModel.endereco" class="form-control"/>                
            </div>
            <div class="form-group">
                <label class="control-label">Número:</label>
                <InputText @bind-Value="userModel.numero" class="form-control"/>                
            </div>
            <div class="form-group">
                <label class="control-label">Bairro:</label>
                <InputText @bind-Value="userModel.bairro" class="form-control"/>                
            </div>
            <div class="form-group">
                <label class="control-label">CEP:</label>
                 <InputText @bind-Value="userModel.cep" @oninput="CepMask" class="form-control" maxlength="9"/>                
            </div>
            <br/>
            <button class="btn btn-outline-success btn-sm" type="submit">Registrar</button>
            <button type="button" class="btn btn-outline-success btn-sm" @onclick="Voltar">Voltar</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<string> TextChanged { get; set; }
    private string[] states;
    private City[] cities;
    private UserModel userModel = new UserModel()
    {
        cpf = "",
        dataNascimento = DateTime.Now
    };

    protected override async Task OnInitializedAsync()
    {
        states = new string[26];
        cities = new City[0];
        states = await Http.GetJsonAsync<string[]>("https://ajudasolidariaapi.azurewebsites.net/v1/estado");
    }

    private async Task ChangedValue(ChangeEventArgs e)
    {
        userModel.estado = e.Value.ToString();
        userModel.cidade = "-1";
        cities = await Http.GetJsonAsync<City[]>("https://ajudasolidariaapi.azurewebsites.net/v1/estado/" + userModel.estado + "/cidades");
    }

    private async Task HandleValidSubmit()
    {
        userModel.status = true;

        await Http.PostJsonAsync("https://ajudasolidariaapi.azurewebsites.net/v1/pessoa", userModel);

        NavigationManager.NavigateTo("/");
    }

    private Task CpfMask(ChangeEventArgs e)
    {
        if (e.Value.ToString().Length > 0)
        {
            var lastchar = e.Value.ToString().Last();
            if (Regex.IsMatch(lastchar.ToString(), @"\d"))
            {
                userModel.cpf = e.Value.ToString();
                if (userModel.cpf.Length == 3)
                {
                    userModel.cpf += ".";
                }

                if (userModel.cpf.Length == 7)
                {
                    userModel.cpf += ".";
                }

                if (userModel.cpf.Length == 11)
                {
                    userModel.cpf += "-";
                }
            }
        }

        return TextChanged.InvokeAsync(userModel.cpf);
    }

    private Task TelefoneMask(ChangeEventArgs e)
    {
        if (e.Value.ToString().Length > 0)
        {
            var lastchar = e.Value.ToString().Last();
            if (Regex.IsMatch(lastchar.ToString(), @"\d"))
            {
                userModel.telefone = e.Value.ToString();
                if (userModel.telefone.Length == 1)
                {
                    userModel.telefone = "(" + userModel.telefone;
                }

                if (userModel.telefone.Length == 3)
                {
                    userModel.telefone += ") ";
                }

                if (userModel.telefone.Length == 10)
                {
                    userModel.telefone += "-";
                }

                Console.WriteLine(userModel.telefone);
            }
        }

        return TextChanged.InvokeAsync(userModel.telefone);
    }

    private Task CepMask(ChangeEventArgs e)
    {
        if (e.Value.ToString().Length > 0)
        {
            var lastchar = e.Value.ToString().Last();
            if (Regex.IsMatch(lastchar.ToString(), @"\d"))
            {
                userModel.cep = e.Value.ToString();
                if (userModel.cep.Length == 5)
                {
                    userModel.cep += "-";
                }
                Console.WriteLine(userModel.cep);
            }
        }

        return TextChanged.InvokeAsync(userModel.cep);
    }

    void Voltar()
    {
        NavigationManager.NavigateTo("/");
    }

    public class City
    {
        public string cidade { get; set; }
        public string siglaUF { get; set; }
    }

    public class UserModel
    {
        [Required(ErrorMessage =
            "Nome é Obrigatório")]
        [Display(Name = "Nome")]
        public string nome { get; set; }
        [Required(ErrorMessage =
            "Data de Nascimento é Obrigatório")]
        [Display(Name = "Data de Nascimento")]
        public DateTime dataNascimento { get; set; }
        [Required(ErrorMessage =
            "CPF é Obrigatório")]
        [RegularExpression(@"/^\d{3}\.\d{3}\.\d{3}\-\d{2}$/", ErrorMessage = "CPF inválido")]
        [Display(Name = "CPF")]
        public string cpf { get; set; }
        [Required(ErrorMessage =
            "Número do Celular é Obrigatório")]
        [RegularExpression(@"\(\d{2}\)\s\d{4,5}\-\d{4}", ErrorMessage = "Celular inválido")]
        [Display(Name = "Telefone")]
        public string telefone { get; set; }
        [Required(ErrorMessage =
            "CEP é Obrigatório")]
        [RegularExpression(@"^\d{5}-\d{3}$", ErrorMessage = "CEP inválido")]
        [Display(Name = "CEP")]
        public string cep { get; set; }
        [Required(ErrorMessage =
            "Endereço é Obrigatório")]
        [Display(Name = "Endereço")]
        public string endereco { get; set; }
        [Required(ErrorMessage =
            "Número da Residência é Obrigatório")]
        [Display(Name = "Número")]
        public string numero { get; set; }
        [Required(ErrorMessage =
            "Cidade é Obrigatório")]
        [Display(Name = "Cidade")]
        public string cidade { get; set; }
        [Required(ErrorMessage =
            "Bairro é Obrigatório")]
        [Display(Name = "Bairro")]
        public string bairro { get; set; }
        [Required(ErrorMessage =
            "Estado é Obrigatório")]
        [Display(Name = "Estado")]
        public string estado { get; set; }
        public string coordenadas { get; set; }
        public bool status { get; set; }
    }
}